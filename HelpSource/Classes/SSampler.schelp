TITLE:: SSampler
summary:: A sampler synthesizer that knows what it's doing.
categories:: SuperSampler
related:: Classes/SampleDescript, Classes/SamplerDB

DESCRIPTION::
Make sure you have installed SC3 plugins before using SuperSampler.

Sampler is a sampling synthesizer that applies SampleDescript for sound quality detection, and using detected information to determine playback bahavier.  Most features of Sampler is done automatically for you.

For example, it detects the beginning of your sound samples, if there are more than one onset, it separates each onsets as different samples.  There are lots of other figures you may want to experiment.


CLASSMETHODS::

METHOD:: new
Create a new SSampler.

ARGUMENT:: samplerName
Name of Sampler.

ARGUMENT:: dbname
Name of Sampler database.  Each database may contain different Sampler libraries.

returns:: this SSampler

METHOD:: allSampler
Returns a dictionary of all samplers created.

METHOD:: playArgs
Play a SamplerArguments instance. Use this method if you want to play an exactly the same sound you have created before.

ARGUMENT:: args
A SamplerArguments to play;

INSTANCEMETHODS::


METHOD:: init
Create a new SSampler and add it to SamplerDB.

ARGUMENT:: samplerName
Name of SSampler.

ARGUMENT:: dbname
Name of SamplerDB this SSampler belongs to.  If the name of SamplerDB is not created, it will create a new SamplerDB class.

returns:: (describe returnvalue here)



METHOD:: key
Play samples by giving key numbers.  If no key number provided, it chooses a random MIDI key number.
Defaults are also provided by SamplerArguments class.

ARGUMENT:: keynums
The MIDI key numbers to play, can be a single number, an array of numbers, or a function that generate the number.
Negative key numbers reverses the buffer to play.  It's default is a random number between 0-127.

ARGUMENT:: syncmode
The strategy to syncronize different samples:

\keeplength: keep the length of all playing sound, align all at peak point of the sample with the longest attack time.  This is the default strategy.

\percussive: make a percussive sound, starts all sounds from peak point.

[\parkat, time]: the peak point of the sound will be set to the scheduled time.

\stretchshort: stretch each shorter samples to fit the longest sample duration.

\nosorting:  just play every sample as it is, like conventional sampler synthesizer.

ARGUMENT:: dur
Duration

ARGUMENT:: amp
Overall amplitude, a multiplier.

ARGUMENT:: ampenv
An Envelop for amplitude, in normalized XY format.  Each node in the Envelope is describe as a pair of time and amplitude in the array.

ARGUMENT:: pan
Overall panning.  O is the center, -1 is left and 1 is right.

ARGUMENT:: panenv
An Envelop for panning, in normalized XY format.  Each node in the Envelope is describe as a pair of time and panning in the array.

ARGUMENT:: bendenv
An Envelop for bending pitch in the sound in normalized XY format.  Each node in the Envelope is describe as a pair of time and pitch bending in the array.


ARGUMENT:: texture
The number of sample sounds to be played in the same time.
If nil, it will play every triggered sounds.

ARGUMENT:: expand
Stretch the played samples with insertion algorithm using granular synthesis.  The value will be the expected time to be stretched.

Granulation runs only when this value is not nil.

ARGUMENT:: grainRate
The grain rate for stratching granular synthesizer.

ARGUMENT:: grainDur
The grain duration for stratching granular synthesizer.

ARGUMENT:: out
Output Bus

ARGUMENT:: midiChannel
A midiChannel for storing the playing UGens in SamplerQuery class, supporting live response.

ARGUMENT:: play
If true, play this sound.

returns:: a instance of SamplerArguments class



METHOD:: db
Return an array of SSamplers in the same SamplerDB database

ARGUMENT:: samplerName
The name of the SSampler to return.

returns:: a SSampler with the name, or a list of SSamplers if not specified.


METHOD:: filenames
Get filenames loaded to this SSampler.
returns:: An array of filenames.



METHOD:: setKeyRanges
Reset range response to each key related to the anchor key number.

In SSampler, every loaded sound files is anchored to a MIDI key number.
When the method .key is used, a range of MIDI key numbers are determined for each sampler to respond to the key number played.

ARGUMENT:: strategy
Determine the method to arrange the responded MIDI key numbers for each sample:

\keynumRadious: Give a range radious in infoArray from each anchor keynums as responsive range.

\fullrange: Every sample is responded in full range of midi key number.

\keynumOnly: Only respond to the anchored key number.

ARGUMENT:: infoArray
Information array provided to respond to the strategy.

METHOD:: keynums
Anchor key numbers for each sample.

returns:: An array of key numbers setted as anchor for each sample in the list.

METHOD:: gui
Opens a gui window, for now you can listen to each sample in the sampler independently, set the anchor key number and response range of each sample.


METHOD:: samples
All samples are stored here.  Samples in SuperSampler is stored as classs of SampleDescript.
You can extract sample informations stored in the class.

returns:: An array of SampleDescript classes.


METHOD:: dbs
The database storing this SSampler.  The name \default is assigned if not specified.

returns:: A SamplerDB class.


METHOD:: load
Load sound files into a Sampler. All sound files will be analyzed and stored as SampleDescript class, and load into buffers.

ARGUMENT:: soundfiles
A list of soundfiles to load.

ARGUMENT:: server
The server to load all samples into buffers.

ARGUMENT:: filenameAsKeynum
Use key numbers provided in the file names as anchored key number for each file.

ARGUMENT:: normalize
This is a argument for SCMIR, making SCMIR to normalize it's data for analyzation.

ARGUMENT:: startThresh
Threshold for starting time detection, it's a multiplier to the peak amplitude of this sound sample.

ARGUMENT:: endThresh
Threshold for ending time detection, it's a multiplier to the peak amplitude of this sound sample.

ARGUMENT:: override
A boolean that determines whether to override samples that has loaded before with the same filename.

ARGUMENT:: action
A function that triggers after the sampler is loaded.


METHOD:: keyRanges
Ranges of responding MIDI key numbers of each samples.

returns:: An array of MIDI key numbers indicating the upper and lower key numbers with each key ranges.  In a format like this:

|-------- Each Sample -------------| |-----Each Sample---

|----Section----|      |----Section----|            |----Section----|

[[[upper, lower], [upper, lower]..], [[upper, lower], [upper, lower]...], ....]


METHOD:: playArgs
Play a SamplerArguments instance. Use this method if you want to play an exactly the same sound you have created before.

ARGUMENT:: args
A SamplerArguments to play;

METHOD:: playEnv
The SSampler will fit it's sound into the provided Envelope automatically.

ARGUMENT:: env
The amplitude envelope to play. It can be an instance of Env class or an breakpoint envelope, such as [x1, y1, x2, y2, ..]

ARGUMENT:: keynums
The MIDI key numbers assigned to play.  It can also be an array of nubwers or a function generating the number.  It's defaulted a random number between 0-127.

ARGUMENT:: dur
Duration of the sound to play.  The sound will start from 1/2 of this value before the peak of the sample, not the beginning of the sound file.

ARGUMENT:: amp
Amplitude multiplier.

ARGUMENT:: pan
Panning, from -1 (left) to 1 (right).

ARGUMENT:: maxtexture
The maxinum number of sounds to be played simultaneously base on the amplitude value in the envelope.  More sounds would be played at the peak of the envelope.

ARGUMENT:: out
Output Bus

ARGUMENT:: midiChannel
A midiChannel for storing the playing UGens in SamplerQuery class, supporting live response.


EXAMPLES::

code::

//The default database when loaded into SamplerDB is \default
//Sound files to load has to be in an array.
(
s.waitForBoot{
	SSampler(\reel).load([Quarks.folder ++ "/SuperSampler/Testcode/Sounds/Reel Palindruome_44.1kHz_int16.aiff"]);
}
)

SSampler(\reel).key;  //play a random keynote
SSampler(\reel).key(40);

SSampler(\reel).key(40, dur: 0.3);


//play chord with different strategies
SSampler(\reel).key([30, 40, 50, 60, 70]);
SSampler(\reel).key([70, 30, 50, 40, 60], [\peakat, 3]);
SSampler(\reel).key([30, 40, 50, 60, 70], \percussive);
SSampler(\reel).key([70, 30, 50, 40, 60], \stretchshort);
SSampler(\reel).key([30, 40, 50, 60, 70], \nosorting);


// Loading multiple sounds into one Sampler
(
s.waitForBoot{
	var tub = (Quarks.folder ++ "/SuperSampler/Testcode/Sounds/Tubular/*.aiff").pathMatch;
	SSampler(\tublar).load(tub, filenameAsKeynum: true);  //using filename as anchored pitch
}
)

SSampler(\tublar).key;

SSampler(\tublar).key(30);
SSampler(\tublar).key(-60); //negative number plays the sound backward.
SSampler(\tublar).key([-60, 60]);
SSampler(\tublar).key([-60, 60], [\peakat, 6]);
SSampler(\tublar).key([-60, 60], [\peakat, 1]);

SSampler(\tublar).key([-60, 60], panenv: Env([-1, 1, -1]));
SSampler(\tublar).key([-60, 60], panenv: [0, -1, 0.5, 1, 1, -1]); //same as the env above

SSampler(\tublar).key([-60, 60], ampenv: Env([3, 1, 3]));

SSampler(\tublar).key([-60, 60, -50, 50], bendenv: [0, 1, 0.2, 1, 1, 3]);

SSampler(\tublar).key(100, expand: 10); //granular expanding




//load John cage speech in different database
(
s.waitForBoot{
SSampler(\cage, \speak).load([Quarks.folder ++ "/SuperSampler/Testcode/Sounds/cage.wav"]);
};
)

SSampler(\cage).keynums;
SSampler(\cage).setKeynums([[20, 30, 40, 50, 60, 70, 80, 90, 100]]);

SSampler(\cage).key;

// retrive envelop from John Cage speaking
~cageenv = Sampler(\cage).samples[0].env.normalize(1);
~cageenv.plot;
~cageenv.test;
//invert and reverse envelop for composition purpose
~cageenv.invert.plot;
~cageenv.reverse.plot;


(
s.waitForBoot{
	Sampler(\nickel).load([Quarks.folder ++ "/SuperSampler/Testcode/Sounds/Nickel 2.wav"]);
}
)

SSampler(\nickel).playEnv(Env(), {rrand(10, 30)});
SSampler(\nickel).playEnv(~cageenv, {rrand(10, 30)});


// Using SamplerDB to play all sounds

SamplerDB(\default).key;

SamplerDB(\default).playEnv(Env());

(
SamplerDB(\default).playEnv(env: ~cageenv);
SSampler(\cage).samples[0].play;
)

::